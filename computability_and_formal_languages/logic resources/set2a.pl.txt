
digit(0).
digit(1).
digit(2).
digit(3).
digit(4).
digit(5).
digit(6).
digit(7).
digit(8).
digit(9).


pick(A, Used, [A|Used]):-var(A), digit(X), not(member(X,Used)), A=X.
pick(A, Used, Used):- not(var(A)), member(A,Used).

digSum(C,D1,D2,S1,NC):-
	S is (C + D1 + D2),
	S1 is S mod 10,
	NC is S // 10.

/* if the sum bit is currently unassigned, use digSum to find a candidate */
/* if the sum bit is already assigned, use digSum to make sure it is ok */
findSum(C, D1, D2, S, NC, Used, [S|Used]) :-
	var(S),
	digSum(C, D1, D2, S, NC),
	not(member(S, Used)).
findSum(C, D1, D2, S, NC, Used, Used):-
	not(var(S)),
	digSum(C, D1, D2, S, NC).

solve([A,B,C,D,E], [F,G,H,I,J], [K,L,M,N,O, P]):-
	pick(E, [], NU1),
	pick(J, NU1, NU2),
	findSum(0, E, J, P, C1, NU2, NU3),
	pick(D, NU3, NU4),
	pick(I, NU4, NU5),
	findSum(C1, D, I, O, C2, NU5, NU6),
	pick(C, NU6, NU7),
	pick(H, NU7, NU8),
	findSum(C2, C, H, N, C3, NU8, NU9),
	pick(B, NU9, NU10),
	pick(G, NU10, NU11),
	findSum(C3, B, G, M, C4, NU11, NU12),
	pick(A, NU12, NU13),
	pick(F, NU13, NU14),
	findSum(C4, A, F, L, K, NU14, NU15).


/*
?- solve([C,R,O,S,S], [R,O,A,D,S], [D,A,N,G,E,R]).

C = 9,
R = 6,
O = 2,
S = 3,
A = 5,
D = 1,
N = 8,
G = 7,
E = 4 ;

No
?- 
*/


/* see set2b for a slight variation */
match([X], YS):- var(X), X=YS.
match([X|[Y|XS]], YS):- var(X), not(var(Y)), prefix(X, Y, YS, RYS), match([Y|XS], RYS).
match([X|XS], [X|YS]):- not(var(X)), match(XS,YS).

prefix([], Z, [Z|YS], [Z|YS]).
prefix(X, Z, [Y|YS], RYS):- Y \= Z, X=[Y|Z1], prefix(Z1, Z, YS, RYS).
