
digit(0).
digit(1).
digit(2).
digit(3).
digit(4).
digit(5).
digit(6).
digit(7).
digit(8).
digit(9).


pick(A, Used, [A|Used]):-var(A), digit(X), not(member(X,Used)), A=X.
pick(A, Used, Used):- not(var(A)), member(A,Used).

digSum(C,D1,D2,S1,NC):-
	S is (C + D1 + D2),
	S1 is S mod 10,
	NC is S // 10.

/* if the sum bit is currently unassigned, use digSum to find a candidate */
/* if the sum bit is already assigned, use digSum to make sure it is ok */
findSum(C, D1, D2, S, NC, Used, [S|Used]) :-
	var(S),
	digSum(C, D1, D2, S, NC),
	not(member(S, Used)).
findSum(C, D1, D2, S, NC, Used, Used):-
	not(var(S)),
	digSum(C, D1, D2, S, NC).


solve([], [], [C], C, _).
solve([X|XS], [Y|YS], [Z|ZS], C, Used):-
	pick(X, Used, U1),
	pick(Y, U1, U2),
	findSum(C, X, Y, Z, C1, U2, U3),
	solve(XS, YS,  ZS, C1, U3).

solveIt(XS, YS, ZS):-
	reverse(XS, XSR),
	reverse(YS, YSR),
	reverse(ZS, ZSR),
	solve(XSR, YSR, ZSR, 0, []).
/*

[debug]  ?- solveIt([C,R,O,S,S], [R,O,A,D,S], [D,A,N,G,E,R]).
C = 9,
R = 6,
O = 2,
S = 3,
A = 5,
D = 1,
N = 8,
G = 7,
E = 4 .



No
?- 
*/

