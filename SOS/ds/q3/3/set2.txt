04.22.12
Analysis of Algorithms
Set 2 Homework, Quarter 3 (spring)
Jay R Bolton

P 52: 3.1-1, 3.1-2
P 60: 3.2-1, 3.2-2 Problems: 3-1, 3-3, 3-4
P 107 Problem: 4-1, 4-2, 4-4

Chapter 3
3.1-1
  Prove: max(f(n), g(n)) = Theta(f(n) + g(n))
  By theorem 3.1, in order for a func to be big-Theta, it should be both big-O
  and big-Omega.
  
  (big-O)
  max(f(n), g(n)) <= f(n) + g(n)
  max(f(n), g(n)) = O(f(n) + g(n))
  
  (big-Omega)
  2 * max(f(n), g(n)) >= f(n) + g(n)
  max(f(n), g(n)) >= f(n) + g(n) * 1/2
  max(f(n), g(n)) = Omega(f(n) + g(n))

3.1-2
  Prove: (n + a)^b = Theta(n^b)
  Similarly to 3.1-1, we need to prove that the RHS is both big-O and big-Omega
  of the LHS.
  
  (big-O)
  We need to show:
  (n+a)^b <= n^b * c for some constant c
  a can be zero or negative.
  b must be positive.
  
  Cases:
  If a == 0:
  n^b = n^b
  n^b = O(n^b)
  
  If a < 0:
  (n+(-a))^b < n^b
  (n+(-a))^b = O(n^b)
  
  If a > 0:
  n+a <= n*a
  (n+a)^b <= (n*a)^b = n^b * a^b
  (n+a)^b <= n^b * a^b
  (n+a)^b = O(n^b) with constant a^b for a > 0
  
  (big-Omega)
  If a == 0:
  n >= n
  n^b >= n^b
  (n+0)^b = O(n^b)
  
  If a < 0:
  (n - a) >= n * -a
  (n - a)^b >= (n * -a)^b
  (n - a)^b >= n^b * -a^b
  (n - a)^b = O(n^b) with constant -a^b for a < 0
  
  If a > 0:
  (n + a) >= n
  (n + a)^b >= n^b
  (n + a)^b = Omega(n^b)

3.2-1
  Show:
	If f(n) and g(n) are monotonically increasing, then so are:
  f(n) + g(n):
    f(n) <= f(m)
    g(n) <= g(m)
    f(n) + g(n) <= f(m) + g(m)
  f(g(n)):
    f(n) <= f(m)
    g(n) <= g(m)
    f(g(n)) <= f(g(m))
    * Let g(n) = p and g(m) = q
    * We know that p <= q because it was stated that g(n) <= g(m)
    * We already said f(n) <= f(m) for all n <= m, and that p <= q
    * Thus f(p) <= f(q), that is f(g(n)) <= f(g(m))

  Show:
  If f(n) and g(n) are nonnegative, then:
  f(n) * g(n) is monotonically increasing
  Definitions:
   * f(n) <= f(m) forall n <= m
   * g(n) <= g(m) forall n <= m
   * f(n) > 0 forall n
   * g(n) > 0 forall n
  Conclusions:
	 * Since f(n) and g(n) are monotonically increasing and only positive, then
		 they will only be positively increasing.
   * f(n) * g(n) <= f(m) * g(m) forall n <= m
	 * This holds true because increasing positive integers multiplied will still
		 be increasing.

3.2-2
Prove:
  a^(log(b,c)) = c^(log(b,a))
  I assume we can use the equations above it.
  Definition: q = b^y <=> log(b,q) = y
    a^(log(b,c)) = c^(log(b,a))
    = log(c,a^(log(b,c)) = log(b,a)
    = log(b,c) * log(c,a) = log(b,a)
    = log(c,a) = log(b,a) / log(b,c)
    = log(c,a) = log(c, a)
  This used equations on p56 above the equation we proved.

3-1
a. Prove: If k >= d, then p(n) = O(n^k)

b. Prove: If k <= d, then p(n) = Omega(n^k)

c. Prove: If k = d, then p(n) = Theta(n^k)

d. Prove: If k > d, then p(n) = o(n^k)

e. Prove: If k < d, then p(n) = omega(n^k)

3-3

3-4

Chapter 4
4-1

4-2

4-4
